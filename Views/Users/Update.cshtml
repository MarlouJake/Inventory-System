@using InventorySystem.Models.DataEntities
@model Item;

@{
    ViewData["Title"] = "Modify";
    //bool isCreationContext = ViewData["IsCreationContext"] is bool value && value;
    //var isCreationContext = ViewData["IsCreationContext"] != null && (bool)ViewData["IsCreationContext"];
    Layout = null;
}

<script>

    var itemid = '@Html.Raw(Model.ItemCode)';
    $(document).on('hidden.bs.modal', '.container #dynamic-modal', function (e) {
      $(this).remove();
    });

    $(document).ready(function () {

        var dropdownElement = $('#updatefirmware');
        var dropdownInitOption = $('#updatefirmwareValue');

        fetchDropdownValues();
        checkcodechanges();
        //setSelectedValues();


        $('#updatecode').on('input', function () {
            checkcodechanges();
        });


        $('#updatecode').on('focus', function () {
            $('#code-container').addClass('input-focus').removeClass('input-blur')
        });

        $('#updatecode').on('blur', function () {
            $('#code-container').removeClass('input-focus').addClass('input-blur');
        });

        $(document).ready(function () {
            var categoryFetched = "@Html.Raw(Model.Category)";
            //changeBgBaseOnCategory(baseOnCategory, firmware, status, category)
            changeBgBaseOnCategory(categoryFetched, null, null, '#category-text');
        });
    });

    function fetchDropdownValues() {
        let CategoryDropdown = $('#categoryPartial').val();
        let StatusDropdown = $('#updatestatus');
        let FirmwareDropdown = $('#updatefirmware');
        let AddButton = $('#add-button');
        switch (CategoryDropdown) {
            case 'Robots':
                getValues('/api/values/get-statuses', 'updatestatus');
                getValues('/api/values/get-options', 'updatefirmware');
                StatusDropdown.prop('disabled', false);
                AddButton.prop('disabled', false);
                break;
            case 'Books':
            case 'Materials':
                getValues('/api/values/get-condition', 'updatestatus');
                StatusDropdown.prop('disabled', false);
                AddButton.prop('disabled', false);
                break;
            default:
                StatusDropdown.prop('disabled', true);
                AddButton.prop('disabled', true);
                break;
        }
    }
    
    function checkcodechanges(){
        var currentcode = $('#updatecode').val();

        if (currentcode !== itemid) {
           
            $('.previous-id').text('Previous Id: ' + itemid);
        } else{
            $('.previous-id').text('No changes');
        }
    }

    function setSelectedValues() {
   
        var selectedStatus = '@Html.Raw(Model.Status)';
        var selectedFirmware = '@Html.Raw(Model.FirmwareUpdated)';

        $('#updatestatus').val(selectedStatus);
        $('#updatefirmware').val(selectedFirmware);
    }

</script>

<style>
    .update, .errors {
        font-size: 0.7rem;

    }

    .category-text{
        font-size: 0.8rem;
        color: white;
        border-radius: 12px;
    }

    .update:focus {
        outline: none;
        border-color: none;
        box-shadow: none;
            outline: #fd7e14 !important;
            border-color: #fd7e14 !important;
    }

    .user-input {
        font-size: 0.7rem;
    }

    .control-label {
        font-size: 0.9rem;
        font-weight: bold;
    }

    .code-container{
        border-radius: 4px;
    }
    

</style>

<h5><strong>Modify Details</strong></h5>
<hr />
<form asp-controller="ValidateApi" asp-action="UpdateItem" asp-route-id="@Model.ItemId" id="update-form" class="forms" method="post" onsubmit="return UpdateRequest(this);">
    <input hidden asp-for="@Model.ItemId" id="dataid" name="dataid"/>
    <div class="form-group d-flex justify-content-between gap-4">
        <div class="d-block w-50">
            <div>
                @if(Model.Category == "Books")
                {
                    <label asp-for="ItemCode" class="control-label">ISBN</label>
                }
                else
                {                   
                    <label asp-for="ItemCode" class="control-label"></label>
                }
                <span asp-validation-for="ItemCode" id="updatecode-error" class="text-danger ms-4 mb-5 errors"></span>
            </div>
            
            <input asp-for="ItemCode" type="text" class="form-control user-input update mb-0" autocomplete="off"
                   name="updatecode"
                   id="updatecode"
                   required
                   data-val="true"
                   data-val-required="Item code is required!"
                   data-val-minlength="Item code must be at least 3 characters long."
                   data-val-minlength-min="3"
                   maxlength="20" pattern="\S+" onkeydown="if(['Space'].includes(arguments[0].code)){return false;}" />
            <span class="previous-id text-muted update mb-0" style="display: flex; margin-top: -1px"></span>
            
        </div>
        
        <div class="d-block w-50">
            @if(Model.Category == "Books")
            {
                <label asp-for="ItemName" class="control-label">Title</label>
            }
            else
            {
                <label asp-for="ItemName" class="control-label"></label>
            }
            <input asp-for="ItemName" type="text" class="form-control user-input update" autocomplete="off"
                   name="updatename"
                   id="updatename"
                   required
                   data-val="true"
                   data-val-required="Item name is required!"
                   data-val-minlength="Item name must be at least 3 characters long."
                   data-val-minlength-min="3"
                   maxlength="20" />
            <span asp-validation-for="ItemName" id="updatename-error" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group mt-1">
            <label asp-for="ItemDescription" class="control-label"></label>
            <textarea asp-for="ItemDescription" type="text" class="form-control user-input update" autocomplete="off"
                   name="updatedesc" 
                   id="updatedesc" 
                   maxlength="5000">
            </textarea>
            <span asp-validation-for="ItemDescription" id="updatedesc-error" class="text-danger"></span>              
    </div>

    <div id="UpdateBaseOnCategory">
        @if (Model.Category == "Robots")
        {
            @await Html.PartialAsync("~/Views/Users/PartialViews/Inventory/HasFirmwareUpdate.cshtml")
        }
        else
        {
            @await Html.PartialAsync("~/Views/Users/PartialViews/Inventory/NoFirmwareUpdate.cshtml")
        }
    </div>

    <hr class="mt-4" />

    <div class="form-group m-0 d-flex">
        <input type="submit" value="Save" class="btn bgc-orange w-25 btn-sm text-light ms-auto modal-button-orange" />
        <input type="button" value="Cancel" class="btn btn-outline-secondary w-25 btn-sm close-modalBtn ms-3" data-bs-dismiss="modal" />
    </div>
</form>

