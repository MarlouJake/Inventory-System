@using InventorySystem.Models.Pagination
@model ItemListViewModel
@using System.Security.Claims;

@{
    ViewData["Title"] = "Items View";
    Layout = null;
    int count = 0; 
    var CurrentUsername = ViewBag.Username as string;
    var CurrentUserid = ViewBag.UserId as int?;
    var message = ViewBag.SuccessMessage as string;
    var currentPage = Model.CurrentPage;
    var totalPages = Model.TotalPages; 
    var pageSize = ViewBag.PageSize;
    var userIdClaim = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
    var storedClaim = int.Parse(userIdClaim!);

    <!--Page Number Button -->

    int startPage = Math.Max(1, Model.CurrentPage - 2); 
    int endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);

    // Ensure 5 page buttons at most
    if (endPage - startPage + 1 < 3)
    {
     
        if (startPage > 1)
            startPage = Math.Max(1, endPage - 4);
        else if (endPage < Model.TotalPages)
            endPage = Math.Min(Model.TotalPages, startPage + 4);
    }
}

<script>
    var currentPage = '@Html.Raw(currentPage)';
    var pageItem = $('.pagination .page-item');
    var checkboxStates = {};
    function handlePaginationUpdate() {
        // handles item overflow due to pagination
        // Reload the item list for the current page to include the new item
        $.ajax({
            type: 'GET',
            url: '@Url.Action("ItemsView", "Users", new { username = ViewBag.Username, page = @currentPage + 1 })', // Load the next page
            success: function (response) {
                $('#view-all .card-container').html(response); // Update the current items with new data
               
            }
        });
    }

    
    // firstButton
    // previousButton
    // jumpBackButton
    // pageNumberButton
    // jumpForwardBUtton
    // nextButton
    // lastButton

    $(document).ready(function(){
        var itemcode = $('#searchbar').val().trim();

        $('#firstButton, #previousButton, #jumpBackButton, #jumpForwardButton, #nextButton, #lastButton').on('click', function() {
            let category = $('.ctg-selected').data('string');
            let itemCode = $('#searchbar').val().trim();
            let page;

            switch (this.id) { 
                case 'firstButton':
                    page = 1;
                    break;
                case 'previousButton':
                    page = @currentPage - 1; 
                    break;
                case 'jumpBackButton':
                    page = @startPage - 1;
                    break;
                case 'jumpForwardButton':
                    page = @endPage + 1;
                    break;
                case 'nextButton':
                    page =  @currentPage + 1;
                    break;
                case 'lastButton':
                    page = @totalPages;
                    break;
                default:
                    return;
            }
        
            loadItemsByCategory(itemcode, category, page);
          
        });


        $('.page-link').on('click', function(){
            $('#selectAllCheckBox').prop('checked', false);

            $('#selectAllCheckBox').trigger('change');
            removeChecks();
        });
        
        $('#selectAllCheckBox').on('change', function () {
            resetCheckState();
        });

        
 
    });

    

    
</script>

<style>
    .page-button{
        width: 4.5rem;
            
    }

    .page-link{
        border-radius: 4px;
        font-size: 0.5rem;
        text-align: center;
    }
</style>

<div class="card-container mb-4  w-auto container-fluid">
    @foreach (var item in Model.Items!)
    {
        @if (count >= 24) break;
        // Stop rendering cards after # items
        @await Html.PartialAsync("ItemCard", item)
        count++; // Increment the counter after rendering each item
    }
</div>

<nav aria-label="Page navigation" class="mt-5">
   
    
        <ul class="pagination pt-3 pagination-sm border">
        @if (Model.Items != null && totalPages > 1)
        {
            <!-- First and Previous Page Button -->
            @if (Model.CurrentPage == 1)
            {
                <li class="page-item disabled text-muted page-button">
                    <a class="page-link">First</a>
                </li>

                <li class="page-item disabled text-muted page-button ms-2">
                    <a class="page-link">Previous</a>
                </li>
            }
            else
            {
                <li class="page-item page-button">
                    <a class="page-link bgc-lsg" id="firstButton" href="javascript:void(0);">First</a>
                </li>

                <li class="page-item page-button ms-2">
                    <a class="page-link bgc-lsg p-1" id="previousButton" href="javascript:void(0);">Prev</a>
                </li>
            }

            <!-- Previous Set of Pages Button -->
            @if (startPage > 1)
            {
                <li class="page-item ms-2">
                    <a class="page-link" href="javascript:void(0);" id="jumpBackButton">&lt;</a>
                </li>
            }

            @for (var i = startPage; i <= endPage; i++)
            {
                <li class="page-item ms-2 @(i == Model.CurrentPage ? "active" : "")">
                    <a class="page-link" href="javascript:void(0);" id="pageNumberButton" onclick="loadPageByNumber(@i, @currentPage)">@i</a>
                </li>
            }

            <!-- Next Set of Pages Button -->
            @if (endPage < Model.TotalPages)
            {
                <li class="page-item  ms-2">
                    <a class="page-link" href="javascript:void(0);" id="jumpForwardButton">&gt;</a>
                </li>
            }

            <!-- Next Page Button -->
            @if (Model.CurrentPage < Model.TotalPages)
            {
                <li class="page-item page-button ms-2">
                    <a class="page-link bgc-lsg" href="javascript:void(0);" id="nextButton">Next</a>
                </li>
            }
            else
            {
                <li class="page-item disabled text-muted page-button ms-2">
                    <span class="page-link">Next</span>
                </li>
            }

            <!-- Last Page Button -->
            @if (Model.CurrentPage == Model.TotalPages)
            {
                <li class="ms-1 page-item disabled text-muted page-button ms-2">
                    <a class="page-link">Last</a>
                </li>
            }
            else
            {
                <li class="page-item page-button ms-2">
                    <a class="page-link bgc-lsg" href="javascript:void(0);" id="lastButton">Last</a>
                </li>
            }
        }
        </ul>
    
</nav>






