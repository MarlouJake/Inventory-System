@using InventorySystem.Models.Pagination
@model ItemListViewModel
@using System.Security.Claims;

@{
    int count = 0; 
    var CurrentUsername = ViewBag.Username as string;
    var CurrentUserId = ViewBag.UserId as int?;
    var message = ViewBag.SuccessMessage as string;
    var currentPage = Model.CurrentPage;
    var totalPages = Model.TotalPages; 
    var pageSize = ViewBag.PageSize;
    var userIdClaim = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
    var storedClaim = int.Parse(userIdClaim!);

    <!--Page Number Button -->

    int startPage = Math.Max(1, Model.CurrentPage - 2); 
    int endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);

    // Ensure 5 page buttons at most
    if (endPage - startPage + 1 < 3)
    {
     
        if (startPage > 1)
            startPage = Math.Max(1, endPage - 4);
        else if (endPage < Model.TotalPages)
            endPage = Math.Min(Model.TotalPages, startPage + 4);
    }
}

<script>
    var currentPage = '@Html.Raw(currentPage)';
    var pageItem = $('.pagination .page-item');
    var checkboxStates = {};

    /*
    function handlePaginationUpdate() {
        // handles item overflow due to pagination
        // Reload the item list for the current page to include the new item
        $.ajax({
            type: 'GET',
            url: '@Url.Action("ItemsView", "Users", new { username = ViewBag.Username, page = @currentPage + 1 })', // Load the next page
            success: function (response) {
                $('#view-all .card-container').html(response); // Update the current items with new data
               
            }
        });
    }*/

    
    // firstButton
    // previousButton
    // jumpBackButton
    // pageNumberButton
    // jumpForwardBUtton
    // nextButton
    // lastButton

    $(document).ready(function(){
        var itemcode = $('#searchbar').val().trim();

        $('#firstButton, #previousButton, #jumpBackButton, #jumpForwardButton, #nextButton, #lastButton').on('click', function() {
            let category = $('.ctg-selected').data('string');
            let itemCode = $('#searchbar').val().trim();
            let page;

            switch (this.id) { 
                case 'firstButton':
                    page = 1;
                    break;
                case 'previousButton':
                    page = @Math.Max(1, currentPage - 1);
                    break;
                case 'jumpBackButton':
                    page =  @Math.Max(1, startPage - 1);
                    break;
                case 'jumpForwardButton':
                    page = @Math.Min(totalPages, endPage + 1);
                    break;
                case 'nextButton':
                    page = @Math.Min(totalPages, currentPage + 1); 
                    break;
                case 'lastButton':
                    page = @Math.Min(totalPages, currentPage + 1);
                    break;
                default:
                    return;
            }
        
            loadItemsByCategory(category, page);
          
        });


        $('.page-link').on('click', function(){
            $('#selectAllCheckBox').prop('checked', false);

            $('#selectAllCheckBox').trigger('change');
            removeChecks();
        });
        
        $('#selectAllCheckBox').on('change', function () {
            resetCheckState();
        });

        
    });
    /*
    function getItems(){
        var modelArray = JSON.parse('@Html.Raw(Json.Serialize(Model.Items))');
        
        var model = modelArray.reduce((obj, item) => {
            obj[item.ItemId] = item;
            return obj;
        }, {});

        let count = 0;
        
        for (const itemId in model) {
            if (count < 24) {
                renderCard(model[itemId].ItemId);
                count++;
            } else {
                break;
            }
        };
        
    }

    function renderCard(itemid){
        var url = `inventory/item-card?id=${itemid}`;
        fetch(url, {
            method: 'GET',
            headers: {
                'Content-Type': 'text/html'
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(data => {
                $('.card-container').append(data);
            })
            .catch(error => 
            {
                console.error("An error occured while rendering cards: ", error);
            });
    }
    */


</script>


<div class="card-container mb-4  w-auto container-fluid">
    
    @if (Model.Items!.Any())
    {
        foreach (var item in Model.Items!)
        {
            if (count >= 24) break;
            @await Html.PartialAsync("ItemCard", item)
            count++;
        }
    }
    else
    {
       <script>
            $('#items-list').html(noItemContainer);
       </script>
    }
</div>

<nav aria-label="Page navigation" class="mt-5">
     
        <ul class="pagination pagination-inventory p-3 pagination-sm bg-dark
            d-flex justify-content-center align-content-center align-items-center">
        @if (Model.Items != null && totalPages > 1)
        {
            // Display "Page 1" if not in the visible set
            if (startPage > 4)
            {
                <li class="page-item ms-2">
                    <a class="page-link" href="javascript:void(0);" onclick="loadItemsByCategory(category, 1);">1</a>
                </li>
            }
            <!--Previous Page Button -->
            if (Model.CurrentPage > 1  && Model.TotalPages != 1)
            {
                <li class="page-item page-button ms-2">
                    <a class="page-link p-1" id="previousButton" href="javascript:void(0);">
                        <i class="fa-solid fa-angle-left"></i>
                    </a>
                </li>
            }
           

            <!-- Previous Set of Pages Button -->
            if (startPage > 1)
            {
                <li class="page-item ms-2">
                    <a class="page-link" href="javascript:void(0);" id="jumpBackButton">&lt;</a>
                </li>
            }

            for (var i = startPage; i <= endPage; i++)
            {
                <li class="page-item ms-2 @(i == Model.CurrentPage ? "active" : "")">
                    <a class="page-link" href="javascript:void(0);" id="pageNumberButton" onclick="loadPageByNumber(@i, @currentPage)">@i</a>
                </li>
            }

            <!-- Next Set of Pages Button -->
            if (endPage < Model.TotalPages)
            {
                <li class="page-item  ms-2">
                    <a class="page-link" href="javascript:void(0);" id="jumpForwardButton">
                        <i class="fa-solid fa-angles-right"></i>
                    </a>
                </li>
            }

            <!-- Next Page Button -->
            if (Model.TotalPages > 1 && Model.CurrentPage != Model.TotalPages)
            {
                <li class="page-item page-button ms-2">
                    <a class="page-link" href="javascript:void(0);" id="nextButton">
                        <i class="fa-solid fa-angle-right"></i>
                    </a>
                </li>
            }

            <!-- Last Page Button -->
            if (endPage < Model.TotalPages)
            {
                <li class="page-item page-button ms-2">
                    <a class="page-link" href="javascript:void(0);" id="jumpToLast">@Model.TotalPages</a>
                </li>
            }
        }
        </ul>
    
</nav>





