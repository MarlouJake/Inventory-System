@using InventorySystem.Models.DataEntities
@model Item
@{
    ViewData["Title"] = "Add Item";
    Layout = null;
}

<script>
    var itemid = '@Html.Raw(Model.ItemId)';
    $(document).ready(function () {


        getValues('/api/values/get-categories', 'categoryDropdown');
        var categoryDropdown = $('#categoryDropdown');
        var updatedropdown = $('#updateDropdown');


        
        toggleDropdown(categoryDropdown, updatedropdown);
        updateLabel();
        hideBoardStatus();
        fetchDropdownValues();

        categoryDropdown.on('change', function () {
            toggleDropdown(categoryDropdown, updatedropdown);
            updateLabel();
            hideBoardStatus();
            fetchDropdownValues();
        });
            
    });


    function fetchDropdownValues() {
        let CategoryDropdown = $('#categoryDropdown').val();
        let StatusDropdown = $('#statusDropdown');
        let FirmwareDropdown = $('#updateDropdown');
        let AddButton = $('#add-button');
        switch (CategoryDropdown) {
            case 'Robots':
                getValues('/api/values/get-statuses', 'statusDropdown');
                getValues('/api/values/get-options', 'updateDropdown');
                StatusDropdown.prop('disabled', false);
                AddButton.prop('disabled', false);
                break;
            case 'Books':
            case 'Materials':
                getValues('/api/values/get-condition', 'statusDropdown');
                StatusDropdown.prop('disabled', false);
                AddButton.prop('disabled', false);
                break;
            default:
                getValues('/api/values/get-statuses', 'statusDropdown');
                StatusDropdown.prop('disabled', true);
                AddButton.prop('disabled', true);
                break;
       }
    }

    function updateLabel(){
        let CategoryDropdown = $('#categoryDropdown').val();
        let codeLabel = $('#code-label');
        let nameLabel = $('#name-label');

        if (CategoryDropdown === "Books") {
            codeLabel.text('ISBN');
            nameLabel.text('Title');
        }
        else {
            codeLabel.text('Code');
            nameLabel.text('Name');
        }     
    }

    function hideBoardStatus(){
        let CategoryDropdown = $('#categoryDropdown').val();
        let boardStatus = $('#firmwareDropdownContainer');

        if (!(CategoryDropdown === "Robots")) {
            boardStatus.addClass('d-none');
        }
        else {
            boardStatus.removeClass('d-none');
        }
    }
 
</script>

<style>

    .user-input, .errors {
        font-size: 0.7rem;
    }
    #firmwareCheckboxLabel{
        font-size: 0.7rem; 
    }

    .control-label {
        font-size: 0.7rem;
        font-weight: bold;
    }

    .w-30{
        width:8rem;
    }

    .w-25{
        width:5rem !important;
    }

    .user-input:focus {
        outline: none;
        border-color: none;
        box-shadow: none;
            outline: #fd7e14 !important;
            border-color: #fd7e14 !important;
    }

    /* Hide the default checkbox */
    #include-firmwarestatus {
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        width: 0.9rem;
        height: 0.9rem;
        border: 1px solid #ccc;
        border-radius: 2px;
        display: inline-block;
        position: relative;
        margin-top:0.4rem;
    }

        /* Create custom checked appearance */
        #include-firmwarestatus:checked {
            background-color: #28a745; /* Green color */
            border-color: #28a745;
        }

            /* Add a checkmark when checked */
            #include-firmwarestatus:checked::after {
                content: "\2713"; /* Unicode for checkmark */
                color: white;
                font-size: 0.7rem;
                position: absolute;
                top: -2px;
                left: 2px;
            }
</style>



<h5 class="text-break"><strong>Add new item</strong></h5>
<hr />
<form asp-controller="ValidateApi" asp-action="AddItem"  id="add-item" method="post" class="forms" onsubmit="return AddRequest(this);">

    <div class="form-group d-flex gap-1" style="font-size: 0.9rem;">
        <div class="w-50 col-sm-2">
            <label asp-for="ItemCode" for="itemCode" id="code-label" class="control-label"></label>
            <input asp-for="ItemCode" id="itemCode" type="text" class="form-control form-control-sm user-input" name="itemCode"
                   autocomplete="off"
                   required
                   placeholder="Item Code"
                   data-val="true"
                   data-val-required="Item code is required!"
                   data-val-minlength="Item code must be at least 3 characters long."
                   data-val-minlength-min="3"
                   maxlength="128"
                   pattern="\S+" onkeydown="if(['Space'].includes(arguments[0].code)){return false;}" />

            <span asp-validation-for="ItemCode" id="itemCode-error" class="text-danger errors"></span>
        </div>

        <div class="w-50 col-sm-2">
            <label asp-for="ItemName" for="itemName" id="name-label" class="control-label"></label>
            <input asp-for="ItemName" id="itemName" class="form-control form-control-sm user-input" name="itemName"
                   autocomplete="on"
                   required
                   placeholder="Item Name"
                   data-val="true"
                   data-val-required="Item name is required!"
                   data-val-minlength="Item name must be at least 3 characters long."
                   maxlength="128" />
            <span asp-validation-for="ItemName" id="itemName-error" class="text-danger errors"></span>
        </div>
    </div>

    <div class="form-group">
        <div>
            <label asp-for="ItemDescription" for="itemDescription" class="control-label"></label>
            <textarea asp-for="ItemDescription" id="itemDescription" type="text" class="form-control form-control-sm user-input" name="itemDescription"
                      autocomplete="on"
                      placeholder="Description" 
                      maxlength="5000">
            </textarea>
                      
            <span asp-validation-for="ItemDescription" id="itemDescription-errror" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group d-flex gap-2">
        
        <div>  
            <label asp-for="Status" for="statusDropdown" class="control-label">Status</label>
            <select asp-for="Status" id="statusDropdown" class="form-control form-control-sm w-30 user-input" required name="statusDropdown">
            </select>
        </div>

        <div>
            <label asp-for="Category" for="categoryDropdown" class="control-label">Category</label>
            <div class="d-flex">
                <select asp-for="Category" id="categoryDropdown" class="form-control form-control-sm w-30 user-input" required name="categoryDropdown">
                </select>
            </div>
        </div>

        <div id="firmwareDropdownContainer" class="d-none">
            <label asp-for="FirmwareUpdated" for="updateDropdown" id="updateDropdownLabel" class="control-label"></label>
            <select asp-for="FirmwareUpdated" id="updateDropdown" class="form-control form-control-sm w-28 user-input" name="updateDropdown">
            </select>
            <span asp-validation-for="FirmwareUpdated" id="updateDropdown-error " class="text-danger errors"></span>
        </div>
    </div>


    <hr class="mt-4" />

    <div class="form-group m-0 d-flex">
        <input type="submit" id="add-button" value="Add" class="ms-auto btn btn-sm btn-success w-30"/>
        <input type="button" value="Cancel" class="btn btn-sm btn-outline-secondary ms-3 w-25" data-bs-dismiss="modal" />
    </div>
</form>




@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

}
