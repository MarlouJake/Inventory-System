@using InventorySystem.Models.DataEntities
@model Item

@{
    string categoryFromModel = ViewBag.Category;
}

<script>
    $(document).ready(function () {
        var categoryFetched = "@Html.Raw(categoryFromModel)";
        //changeBgBaseOnCategory(baseOnCategory, firmware, status, category)

        changeBgBaseOnCategory(categoryFetched, '#firmware-status', '#item-status', '#item-category');
    });
</script>

<div class="d-flex mt-1">

    <dl class="d-block mt-0 w-60">
        <div class="d-flex category-container">
            <dt class="row-sm-2 status-header d-flex align-items-center w-40">
                @Html.DisplayNameFor(model => model.Category)
                <span class="semi-colon ms-auto">:</span>
            </dt>

            <dd id="item-category" class="row-sm-2 status-view" style="font-size:0.5rem;">
                @if (!string.IsNullOrEmpty(Model.Category))
                {
                    @Html.DisplayFor(model => model.Category)
                }
                else
                {
                    <span>--</span>
                }
            </dd>
           
        </div>

        <div class="d-flex mt-0">
            <dt class="row-sm-2 status-header d-flex align-items-center">
                @Html.DisplayNameFor(model => model.Status)
                <span class="semi-colon ms-auto">:</span>
            </dt>
            <dd id="item-status" class="row-sm-2 status-view text-break text-wrap" style="font-size:0.5rem;">
                @if (!string.IsNullOrEmpty(Model.Status))
                {
                    @Html.DisplayFor(model => model.Status)
                }
                else
                {
                    <span>--</span>
                }
            </dd>
            
        </div>

        <div class="d-flex mt-0">
            <dt class="row-sm-2 status-header d-flex align-items-center w-40">
                @Html.DisplayNameFor(model => model.FirmwareUpdated)
                <span class="semi-colon ms-auto">:</span>
            </dt>

            <dd id="firmware-status" class="row-sm-2 status-view" style="font-size:0.5rem;">
                @if (!string.IsNullOrEmpty(Model.FirmwareUpdated))
                {
                    @Html.DisplayFor(model => model.FirmwareUpdated)
                }
                else
                {
                    <span>--</span>
                }
            </dd>
            
           
        </div>
    </dl>


    <dl class="d-flex">
        <div class="d-block date-container">
            <dt class="row-sm-2 date-header">
                @Html.DisplayNameFor(model => model.ItemDateAdded)
            </dt>
            <dd class="row-sm-2 text-break date-body text-muted">
                @Html.DisplayFor(model => model.ItemDateAdded)
            </dd>

            <dt class="row-sm-2 date-header">
                @Html.DisplayNameFor(model => model.ItemDateUpdated)
            </dt>

            <dd class="row-sm-2 text-break date-body text-muted">
                @if (Model.ItemDateUpdated.ToString("yyyy-MM-dd HH:mm:ss.ffffff") == "0001-01-01 00:00:00.000000")
                {
                    <span>Not Modified</span>
                }
                else
                {
                    @Html.DisplayFor(model => model.ItemDateUpdated)
                }
            </dd>
        </div>



    </dl>

</div>