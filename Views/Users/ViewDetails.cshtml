@using InventorySystem.Models.DataEntities
@model Item;

@{
    ViewData["Title"] = "User Details";
    string categoryFromModel = ViewBag.Category;
    int itemId = ViewBag.ItemId;
    Layout = null;
}
<script>

    $(document).on('hidden.bs.modal', '.container #dynamic-modal', function (e) {
        $(this).remove();
    });

    $(document).ready(function () {
        var categoryFetched = "@Html.Raw(categoryFromModel)";

        $('#deleteButtonView').on('click', DeleteItem);

        getPartialView(categoryFetched);
    });

    function DeleteItem(){
          let itemIds = []; 
          itemIds.push(@Model.ItemId);
          sessionStorage.setItem('deleteIds', JSON.stringify(itemIds));
          sessionStorage.setItem('deleteLenght', itemIds.length);
          ModalShow('inventory/remove/@Model.ItemId');
    }

    function getPartialView(category){
        let url;
        switch(category){
            case 'Robots':
                url = 'inventory/details/partial_views/has_firmwareview';
                break;
            case 'Books':
            case 'Materials':
                url = 'inventory/details/partial_views/no_firmwareview';
                break;
            default:
                console.error('Category not  found: ', category);
                break;
        }

            fetch(`${url}?id=${@Html.Raw(itemId)}`, {
               method: 'GET',
               headers: {
                   'Content-Type' : 'text/html'                   
               }
        }).then(response => {
            if(!response.ok){
               throw new Error('Network response was not ok');
            }
            return response.text();
        }).then(data => {
                   $('#ViewBaseOnCategory').html(data);
        }).catch(error => {
               connsole.error('There was a problem with the fetch operation:', error);
        });
    }
</script>

<style>
    .status-header {
        width: 6rem;
        font-size: 0.9rem;
    }

    .status-body, .status-view {
        border-radius: 12px;
        /*background-color: lightslategray;*/
        color: white;
        padding-left: 0.4rem;
        padding-right: 0.4rem;
        height: 1.2rem;
        font-size: 0.8rem;
        display: flex;
        justify-content: center; /* Centers text horizontally */
        align-items: center; /* Centers text vertically */
        text-align: center; /* For multiline content */
    }

    .status-view{
        margin-top: 0.7rem;
        margin-left: 0.7rem;
    }

    .date-header {
        font-size: 0.9rem;
    }

    .date-body {
        font-size: 0.8rem;
    }

    #deleteButtonView i{
        font-size: 0.8rem;
    }

</style>

<h5 class="pt-2 d-flex">
    <strong class="pt-1">Item Details</strong>
    <a class="ms-auto fs-5 btn btn-danger d-inline-flex" id="deleteButtonView" >
        <i class="fa-solid fa-trash-can"></i>
    </a>
</h5>

<hr class="mt-0 mb-0"/>

<div class="row mt-0">
    <dl class="mb-0">

        <div class="d-flex" style="font-size: 0.9rem;">
            @if (categoryFromModel == "Books")
            {
                <dt class="d-flex col-sm-2 w-50">
                    @Html.DisplayName("ISBN")
                </dt>
                <dt class="d-flex col-sm-2 w-50 border-start ps-2">
                    @Html.DisplayName("Title")
                </dt>
            }
            else
            {
                <dt class="d-flex col-sm-2 w-50">
                    @Html.DisplayNameFor(model => model.ItemCode)
                </dt>
                <dt class="d-flex col-sm-2 w-50 border-start ps-2">
                    @Html.DisplayNameFor(model => model.ItemName)
                </dt>
            }          
        </div>

        <div class="d-flex" style="font-size: 0.8rem;">
            <dd class="d-flex col-sm-10 text-break w-50">
                @Html.DisplayFor(model => model.ItemCode)
            </dd>
            <dd class="d-flex col-sm-10 text-break w-50 border-start ps-2">
                @Html.DisplayFor(model => model.ItemName)
            </dd>
        </div>



        <div style="font-size: 0.9rem;">
            <dt class="col-sm-2 w-auto">
                @Html.DisplayNameFor(model => model.ItemDescription)
            </dt>
            @if (!String.IsNullOrEmpty(Model.ItemDescription))
            {
                <dd class="col-sm-10  border p-2" style="font-size: 0.8rem;">
                    @Html.DisplayFor(model => model.ItemDescription)
                </dd>
            }
            else
            {
                <dd class="col-sm-10 border w-auto p-2" style="font-size: 0.8rem;">
                    No Description
                </dd>
            }

            
        </div>
    </dl>

    <div id="ViewBaseOnCategory">

    </div>



</div>
<div class="form-group m-0 d-flex">
    <a onclick="ModalShow(`inventory/modify/@Model.ItemId`)" class="btn btn-sm w-25 btn-success ms-auto">Modify</a>
    <input type="button" value="Cancel" class="ms-2 btn btn-sm w-25 btn-outline-secondary" data-bs-dismiss="modal" />
</div>
